@use "sass:math";

// @function for converting px to rem
@function rem($px) {
  @if math.is-unitless($px) {
    @return calc($px / 16 * 1rem);
  } @else {
    // @error "Argument must be unitless";
    @return calc($px / 16px * 1rem);
  }

  // @return calc($px / 16px * 1rem);
}

// @debug rem(18);
// @debug rem(18px);

@function px($rem) {
  @return math.div($rem * 16, 1rem);
}

// @debug px(0.625rem);

//  fluid-fs function -
//  - takes 4 arguments
//  - first 2 is for minimum and maxium font size in pixel or rem
//  - takes all unitless values as pixels but first 2 args can be rem
//  - last 2 should always be unitless as they are minimum & maximum viewport width in pixels

@function fluid-fs($minpx, $maxpx, $minvw, $maxvw) {
  @if math.unit($minpx) == "rem" {
    $minpx: px($minpx);
  }

  @if math.unit($maxpx) == "rem" {
    $maxpx: px($maxpx);
  }

  @if check-unitless($minpx, $maxpx, $minvw, $maxvw) {
    $pv: calc((100 * ($maxpx - $minpx)) / ($maxvw - $minvw)) * 1vw;
    $pr: calc(
        ((($minvw * $maxpx) - ($maxvw * $minpx)) / ($minvw - $maxvw)) / 16
      ) *
      1rem;
    $min: calc($minpx / 16) * 1rem;
    $max: calc($maxpx / 16) * 1rem;

    @return clamp($min, $pv + $pr, $max);
  } @else {
    @warn "all values must be a pixel value and unitless";
    @return null;
  }
}

// @debug fluid-fs(16, 32, 600, 1400);
// @debug fluid-fs(1rem, 2rem, 600, 1400);
// @debug fluid-fs(36px, 52px, 600px, 1400px);
// @debug fluid-fs(36, 52, 600, 1400);

//  check if numbers are unitless
@function check-unitless($numbers...) {
  $bool: true;
  @each $number in $numbers {
    $bool: math.is-unitless($number) and $bool;
  }
  @return $bool;
}

// @debug check-unitless(36, 52, 600, 1400px);
// @debug 1px * 1px;

// @debug math.div(2rem * 16, 1rem);
// @debug math.unit(12rem);

// @debug (16px * 0 + 1);

// @debug type-of(px1);
// @debug not math.is-unitless(15);

// @debug math.div(15px, (15px * 0 + 1));
